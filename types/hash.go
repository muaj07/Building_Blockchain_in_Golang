package types
import (
	"fmt"
 	"crypto/rand"
	"encoding/hex"
)

type Hash [32]uint8

func (h Hash) IsZero() bool {
	for i :=0; i<32; i++{
		if h[i] != 0 {
			return false
		}
	}
	return true
}

func (h Hash) ToSlice() []byte {
	b := make([]byte, 32)
	for i :=0; i<32; i++ {
		b[i] = h[i]
	}
	return b
}

func (h Hash) String() string{
	return hex.EncodeToString(h.ToSlice())
}


// HashFromBytes takes a byte slice b and returns a Hash.
// If the length of b is not 32, it panics with an error message.
func HashFromBytes(b []byte) Hash {
    // Check if the length of b is 32
    if len(b) != 32 {
        msg := fmt.Sprintf("Given bytes with length %d should be 32", len(b))
        panic(msg)
    }

    // Copy the bytes to a new array of length 32
    var value [32]uint8
    for i := 0; i < 32; i++ {
        value[i] = b[i]
    }

    // Convert the array to a Hash and return it
    return Hash(value)
}

// RandomRead returns a slice of random bytes of the given size
func RandomRead(size int) []byte {
    // create a byte slice with the given size
    token := make([]byte, size)
    // populate the slice with random bytes
    rand.Read(token)
    // return the slice
    return token
}


// RandomHash generates a random Hash.
//
// It returns a Hash type which is generated by hashing random bytes obtained from RandomRead function.
func RandomHash() Hash {
    return HashFromBytes(RandomRead(32))
}
